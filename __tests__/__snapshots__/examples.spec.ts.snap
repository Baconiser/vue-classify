// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`examples examples/computeds/SimpleComputed.js 1`] = `
"import Vue from 'vue'
import Component from 'vue-class-component'
import { mapState } from 'vuex'
@Component({})
export default class MyVueCompoennt extends Vue {
  get current() {
    return 1
  }
  get next() {
    return this.now + 1
  }
  @State(state => state.listA)
  listA: any
  @Getter('user') user: any
}
"
`;

exports[`examples examples/hooks/LifeCycle.js 1`] = `
"import Vue from 'vue'
import Component from 'vue-class-component'
@Component({})
export default class MyVueCompoennt extends Vue {}
"
`;

exports[`examples examples/props/Prop.js 1`] = `
"import Vue from 'vue'
import Component from 'vue-class-component'
import { Prop } from 'vue-property-decorator'
@Component({})
export default class MyVueCompoennt extends Vue {
  @Prop() propA: number
  @Prop() propB: Array<string | number>
  @Prop({ required: true })
  propC: string
  @Prop({ default: 100 })
  propD: number
  @Prop({
    // Object or array defaults must be returned from
    // a factory function
    default() {
      return { message: 'hello' }
    },
  })
  propE: any
  @Prop({
    validator(value) {
      // The value must match one of these strings
      return ['success', 'warning', 'danger'].indexOf(value) !== -1
    },
  })
  propF: any
}
"
`;

exports[`examples examples/todo-app/TodoList.vue 1`] = `
"<template>

<div>
  <BaseInputText
    v-model=\\"newTodoText\\"
    placeholder=\\"New todo\\"
    @keydown.enter=\\"addTodo\\"
  />
  <ul v-if=\\"todos.length\\">
    <TodoListItem
      v-for=\\"todo in todos\\"
      :key=\\"todo.id\\"
      :todo=\\"todo\\"
      @remove=\\"removeTodo\\"
    />
  </ul>
  <p v-else>
    Nothing left in the list. Add a new todo in the input above.
  </p>
</div>

</template>

<script lang=\\"ts\\">
import Vue from 'vue'
import Component from 'vue-class-component'

import TodoListItem from './TodoListItem.vue'
import BaseInputText from './BaseInputText.vue'
@Component({ components: { BaseInputText: BaseInputText, TodoListItem: TodoListItem } })
export default class MyVueCompoennt extends Vue {
  newTodoText = ''
  todos = [
    {
      id: nextTodoId++,
      text: 'Learn Vue',
    },

    {
      id: nextTodoId++,
      text: 'Learn about single-file components',
    },

    {
      id: nextTodoId++,
      text: 'Fall in love',
    },
  ]
  addTodo() {
    const trimmedText = this.newTodoText.trim()
    if (trimmedText) {
      this.todos.push({
        id: nextTodoId++,
        text: trimmedText,
      })

      this.newTodoText = ''
    }
  }
  removeTodo(idToRemove) {
    this.todos = this.todos.filter(todo => {
      return todo.id !== idToRemove
    })
  }
}

</script>"
`;

exports[`examples examples/todo-app/TodoListItem.vue 1`] = `
"<template>

<li>
  { todo.text }
  <button @click=\\"$emit('remove', todo.id)\\">
    X
  </button>
</li>

</template>

<script lang=\\"ts\\">
import Vue from 'vue'
import Component from 'vue-class-component'
import { Prop } from 'vue-property-decorator'
@Component({})
export default class MyVueCompoennt extends Vue {
  @Prop({ required: true })
  todo: any
}

</script>"
`;

exports[`examples examples/todomvc/TodoMVC.js 1`] = `
"import Vue from 'vue'
import Component from 'vue-class-component'
import { Watch } from 'vue-property-decorator'
@Component({
  filters: {
    pluralize(n) {
      return n === 1 ? 'item' : 'items'
    },
  },

  // a custom directive to wait for the DOM to be updated
  // before focusing on the input field.
  // http://vuejs.org/guide/custom-directive.html
  directives: {
    'todo-focus'(el, binding) {
      if (binding.value) {
        el.focus()
      }
    },
  },
})
export default class MyVueCompoennt extends Vue {
  todos = todoStorage.fetch()
  newTodo = ''
  editedTodo = null
  visibility = 'all'
  get filteredTodos() {
    return filters[this.visibility](this.todos)
  }
  get remaining() {
    return filters.active(this.todos).length
  }
  @Watch('todos', { deep: true }) onTodosChange(todos) {
    todoStorage.save(todos)
  }
  addTodo() {
    var value = this.newTodo && this.newTodo.trim()
    if (!value) {
      return
    }
    this.todos.push({ id: todoStorage.uid++, title: value, completed: false })
    this.newTodo = ''
  }
  removeTodo(todo) {
    this.todos.splice(this.todos.indexOf(todo), 1)
  }
  editTodo(todo) {
    this.beforeEditCache = todo.title
    this.editedTodo = todo
  }
  doneEdit(todo) {
    if (!this.editedTodo) {
      return
    }
    this.editedTodo = null
    todo.title = todo.title.trim()
    if (!todo.title) {
      this.removeTodo(todo)
    }
  }
  cancelEdit(todo) {
    this.editedTodo = null
    todo.title = this.beforeEditCache
  }
  removeCompleted() {
    this.todos = filters.active(this.todos)
  }
}
"
`;

exports[`examples examples/watch/WatchExample.js 1`] = `
"import Vue from 'vue'
import Component from 'vue-class-component'
import { Prop, Watch } from 'vue-property-decorator'
@Component({})
export default class WatchExample extends Vue {
  @Prop() value: number
  currentValue = this.value
  @Watch('currentValue') onCurrentValueChange(val) {
    this.$emit('input', val)
  }
  @Watch('value') onValueChange(val) {
    this.currentValue = val
  }
}
"
`;
